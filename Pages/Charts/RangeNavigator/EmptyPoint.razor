@page "/RangeSelector/EmptyPoint"
@using Syncfusion.EJ2.Blazor.Charts
@inject HttpClient Http
@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Empty Points";
    SampleBrowser.CurrentControlName = "RangeNavigator";
    SampleBrowser.CurrentControlCategory = "RangeNavigator";
    SampleBrowser.CurrentControl = SampleBrowser.Config.RangeNavigator;
    SampleBrowser.ActionDescription = new string[] {
         @"<p>
        This sample illustrates the functionality of empty points in the range navigator series.
    </p>"
    };
    SampleBrowser.Description = new string[] {
         @"<p>
        In this example, you can see how to render empty points in range navigator. Tooltip is enabled in this example; to see the tooltip in action, while the selected range is changed.
    </p>"
    };
}
@*End:Hidden*@
@if (emptyData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section" align="center">
        <h4 id="days" style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;">AAPL 2012-17</h4>
        <div id="container">
            <EjsRangeNavigator id="container" Value="@value" LabelPosition="AxisPosition.Outside" valueType=Syncfusion.EJ2.Blazor.Charts.RangeValueType.DateTime>
                <RangeNavigatorMajorGridLines Width="0"></RangeNavigatorMajorGridLines>
                <RangeNavigatorMajorTickLines Width="0"></RangeNavigatorMajorTickLines>
                <RangeNavigatorBorder Width="0"></RangeNavigatorBorder>
                <RangeNavigatorRangeTooltipSettings Enable="true" DisplayMode="TooltipDisplayMode.Always"></RangeNavigatorRangeTooltipSettings>
                <RangeNavigatorSeriesCollection>
                    <RangeNavigatorSeries Fill="url(#material-gradient-chart)" DataSource="@emptyData" Width="2" xName="x" type="RangeNavigatorType.Area" yName="open">
                    </RangeNavigatorSeries>
                </RangeNavigatorSeriesCollection>
            </EjsRangeNavigator>
        </div>
        <div id="chartcontainer">
            <EjsChart id="chart">
                <ChartArea><ChartAreaBorder Width="0" Color="transparent"></ChartAreaBorder></ChartArea>
                <ChartPrimaryXAxis ValueType="Syncfusion.EJ2.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
                </ChartPrimaryXAxis>
                <ChartPrimaryYAxis RangePadding="ChartRangePadding.Normal">
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                </ChartPrimaryYAxis>
                <ChartSeriesCollection>
                    <ChartSeries Fill="url(#material-gradient-chart)" DataSource="@emptyData" XName="x" YName="open" name="Sales" width="2" type="ChartSeriesType.Area">
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                <ChartLegendSettings Visible="false"></ChartLegendSettings>
            </EjsChart>
        </div>
    </div>
}
@code{
    ChartData[] emptyData;
    protected override async Task OnInitAsync()
    {
        emptyData = await Http.GetJsonAsync<ChartData[]>("scripts/range-navigator/chartdata.json");
    }
    class ChartData
    {
        public DateTime x;
        public double open;
    }
    DateTime[] value = new DateTime[] { new DateTime(2013, 12, 27), new DateTime(2015, 03, 23) };
}
<style>
    #control-container {
        padding: 0px !important;
    }

    #material-gradient-chart stop {
        stop-color: #00bdae;
    }

    #fabric-gradient-chart stop {
        stop-color: #4472c4;
    }

    #bootstrap-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #bootstrap4-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #highcontrast-gradient-chart stop {
        stop-color: #79ECE4;
    }

    .chart-gradient stop[offset="0"] {
        stop-opacity: 0.9;
    }

    .chart-gradient stop[offset="1"] {
        stop-opacity: 0.3;
    }
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="material-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fabric-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap4-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>

